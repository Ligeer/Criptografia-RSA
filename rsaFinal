#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

//FUNÇÕES
int geraNumeroMax(int n);
int primalidade(int n);
void geraSeed();
int *geraLista();
void printLista(int *numprimo);

//OPERAÇÕES
//*FALTA COMEÇAR IMPLEMENTAR AS OPERAÇÕES

int main() {
    int *lstPrimo;

    geraSeed();
    lstPrimo = geraLista();
    printLista(lstPrimo);
    return 0;
}

int geraNumeroMax(int n){
    return rand() % n + 1;
}

void geraSeed() { /* gera uma seed para nova sequencia de numeros aleatorios */
    srand((unsigned)time(NULL));
}

int *geraLista() {
    int i;
    i=0;
    int *numPrimo;
    numPrimo = (int*) malloc(sizeof(int)*255);
    while (i != 256) {
        numPrimo[i] = geraNumeroMax(9);
        i++;
    }
    return numPrimo;
}

void printLista(int *numPrimo){
    int i;
    i=0;
    while(i != 256){ 
        printf("Indice: %d |Num: %d \n", i, numPrimo[i]);
        i++;
    }
}

int primalidade(int n){
    int b = n-1;
    int i = 0;
    int a = 0;
    int result;
    while(i <= 100){ /*Rodando 100 vezes para diminuir em 1/2*100 a chance de erro*/
        a = geraNumeroMax(n-1); /*Gerando numero entre 1 e n-1*/
        //result = expModular(a, b, n);
        if (result != 1 % n){ /*Verificando inverso multiplicativo*/
            return 0;
        }
        i++;
    }
    return 1;
}
